/**
 * WARNING !
 * Do not edit this file directly, 
 * it will be automatically generated at commit time.
 * Template: templates/Styleguide.d.ts.ejs 
 * Data: src/scripts/schemas/config.ts 
 */ 

import React from 'react'
import WebpackDevServer from 'webpack-dev-server'
import { ComponentDoc, PropDescriptor } from 'vue-docgen-api'
import { TransformOptions } from 'buble'
import { loader } from 'webpack'
import * as Rsg from 'react-styleguidist'
import { EXPAND_MODE } from './enums'
import { ExampleLoader } from './Example'
import { ComponentProps } from './Component'
 
export interface StyleguidistContext extends loader.LoaderContext {
    _styleguidist: StyleguidistConfig
}

export interface StyleguidistConfig
    extends Omit<Rsg.ProcessedStyleguidistConfig, 'propsParser' | 'sortProps' | 'updateDocs'> {<% 
    Object.keys(schema).forEach(key => {
        const opt = schema[key]
        if(opt.inherit)return
        const description = opt.description || opt.message
        const defaultShowable = ['boolean', 'number', 'string'].indexOf(typeof opt.default) > -1
if(description || defaultShowable || opt.deprecated){%>
    /**<% 
    if(description) { %>
     * <%- description %> <%
    }

    if(opt.deprecated) { %>
     * @deprecated <%- opt.deprecated %> <%
    }

    if(defaultShowable) { %>
     * @default <%- JSON.stringify(opt.default) %> <%
    }
    %>
     */<%
}
    %>
    <%-key %>: <%- schema[key].tstype || (['number', 'boolean', 'string'].indexOf(schema[key].type) > -1 ? 
        schema[key].type : schema[key].uitype) || 'any' %>;<%
    });
%>
}

export interface StyleGuideObject {
    sections: Rsg.ProcessedSection[]
    config: StyleguidistConfig
    renderRootJsx: React.ReactNode
    welcomeScreen: any
    patterns: string[]
}